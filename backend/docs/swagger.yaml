definitions:
  domain.CategoryParams:
    properties:
      category:
        type: integer
      pattern:
        type: string
    type: object
  domain.ChangeUserAccess:
    properties:
      id:
        type: integer
      new_access:
        type: integer
    required:
    - id
    - new_access
    type: object
  domain.ComplaintID:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  domain.FetchLevelStruct:
    properties:
      filter_params:
        $ref: '#/definitions/domain.LevelFilterParams'
      page_info:
        $ref: '#/definitions/github_com_Gadzet005_GoType_backend_internal_domain_Level.PageInfo'
      sort_params:
        $ref: '#/definitions/domain.LevelSortParams'
      tags:
        items:
          type: string
        type: array
    required:
    - filter_params
    - page_info
    - sort_params
    - tags
    type: object
  domain.GetLevelInfoStruct:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  domain.GetUserInfoStruct:
    properties:
      access:
        type: integer
      ban_reason:
        type: string
      ban_time:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  domain.GetUserStatsRes:
    properties:
      user_stats:
        $ref: '#/definitions/domain.PlayerStats'
    type: object
  domain.GetUsersTop:
    properties:
      users:
        items:
          $ref: '#/definitions/domain.PlayerStats'
        type: array
    type: object
  domain.Level:
    properties:
      author:
        type: integer
      author_name:
        type: string
      description:
        type: string
      difficulty:
        type: integer
      duration:
        type: integer
      id:
        type: integer
      image_type:
        type: string
      language:
        type: string
      name:
        type: string
      preview_path:
        type: string
      tags:
        items:
          type: string
        type: array
      type:
        type: string
    required:
    - author
    - author_name
    - description
    - difficulty
    - duration
    - image_type
    - language
    - name
    - tags
    - type
    type: object
  domain.LevelBan:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  domain.LevelComplaint:
    properties:
      author_id:
        type: integer
      level_id:
        type: integer
      message:
        type: string
      reason:
        type: string
    required:
    - author_id
    - level_id
    - message
    - reason
    type: object
  domain.LevelComplaints:
    properties:
      level_complaints:
        items:
          $ref: '#/definitions/domain.LevelComplaint'
        type: array
    type: object
  domain.LevelComplete:
    properties:
      average_velocity:
        type: number
      level_id:
        type: integer
      max_combo:
        type: integer
      num_press_err_by_char:
        additionalProperties:
          items:
            type: integer
          type: array
        description: NumPressErrByChar map[rune][2]int `json:"num_press_err_by_char"
          binding:"required" db:"-"`
        type: object
      placement:
        type: integer
      player_id:
        type: integer
      points:
        type: integer
    required:
    - average_velocity
    - level_id
    - max_combo
    - num_press_err_by_char
    - placement
    - player_id
    - points
    type: object
  domain.LevelFilterParams:
    properties:
      difficulty:
        type: integer
      language:
        type: string
      level_name:
        type: string
    type: object
  domain.LevelInfo:
    properties:
      level_info:
        $ref: '#/definitions/domain.Level'
    type: object
  domain.LevelSortParams:
    properties:
      date:
        type: string
      popularity:
        type: string
    type: object
  domain.LevelsList:
    properties:
      levels:
        items:
          $ref: '#/definitions/domain.Level'
        type: array
    type: object
  domain.PlayerStats:
    properties:
      average_accuracy_classic:
        type: number
      average_accuracy_relax:
        type: number
      average_delay:
        type: number
      num_chars_classic:
        type: integer
      num_chars_relax:
        type: integer
      num_classes_classic:
        items:
          type: integer
        type: array
      num_games_mult:
        type: integer
      num_level_classic:
        type: integer
      num_level_relax:
        type: integer
      num_press_err_by_char_by_lang:
        additionalProperties:
          additionalProperties:
            items:
              type: integer
            type: array
          type: object
        description: NumPressErrByCharByLang map[string]interface{} `json:"num_press_err_by_char_by_lang"
          db:"num_press_err_by_char_by_lang" binding:"required"`
        type: object
      sum_points:
        type: integer
      user_id:
        type: integer
      user_name:
        type: string
      win_percentage:
        type: number
    required:
    - num_press_err_by_char_by_lang
    type: object
  domain.RefreshStruct:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  domain.StatSortFilterParams:
    properties:
      category_params:
        $ref: '#/definitions/domain.CategoryParams'
      page_info:
        $ref: '#/definitions/github_com_Gadzet005_GoType_backend_internal_domain_Statistics.PageInfo'
      points:
        type: string
    required:
    - page_info
    type: object
  domain.User:
    properties:
      name:
        type: string
      password:
        description: hash
        type: string
    required:
    - name
    - password
    type: object
  domain.UserBan:
    properties:
      ban_reason:
        type: string
      ban_time:
        type: string
      id:
        type: integer
    required:
    - ban_reason
    - ban_time
    - id
    type: object
  domain.UserComplaint:
    properties:
      author_id:
        type: integer
      message:
        type: string
      reason:
        type: string
      user_id:
        type: integer
    required:
    - author_id
    - message
    - reason
    - user_id
    type: object
  domain.UserComplaints:
    properties:
      user_complaints:
        items:
          $ref: '#/definitions/domain.UserComplaint'
        type: array
    type: object
  domain.UserID:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  domain.UserSearchParams:
    properties:
      is_banned:
        type: boolean
      name:
        type: string
      offset:
        type: integer
      page_size:
        type: integer
    required:
    - is_banned
    - name
    - offset
    - page_size
    type: object
  domain.UserUnban:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  domain.Users:
    properties:
      users:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
  github_com_Gadzet005_GoType_backend_internal_domain_Level.PageInfo:
    properties:
      offset:
        type: integer
      page_size:
        type: integer
    required:
    - offset
    - page_size
    type: object
  github_com_Gadzet005_GoType_backend_internal_domain_Statistics.PageInfo:
    properties:
      offset:
        type: integer
      page_size:
        type: integer
    required:
    - offset
    - page_size
    type: object
  handler.errorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for GoType game and website
  title: GoType App API
  version: 0.0.1
paths:
  /admin/ban-level:
    post:
      consumes:
      - application/json
      description: Ban level with given id. Available only for moderators and admins
      operationId: ban-level
      parameters:
      - description: id of level you want to ban
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.LevelBan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_ENTITY_NOT_FOUND - Level with such
            id does not exist; ERR_INVALID_INPUT - Wrong structure of input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Ban level
      tags:
      - admin
  /admin/ban-user:
    post:
      consumes:
      - application/json
      description: Ban user with given id if your access is greater than theirs. Available
        only for moderators and admins
      operationId: ban-user
      parameters:
      - description: id of user you want to ban, duration of ban (format 10h), ban_reason
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.UserBan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_NO_SUCH_USER - User with such id
            does not exist; ERR_INVALID_INPUT - Wrong structure of input json/Wrong
            format of ban duration;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Ban user
      tags:
      - admin
  /admin/change-user-access:
    post:
      consumes:
      - application/json
      description: Change access of a user if your access is greater that theirs.
        New value must be less than admin's one. Available only for moderators and
        admins
      operationId: change-user-access
      parameters:
      - description: id of user you want to ban, new value of access
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.ChangeUserAccess'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_NO_SUCH_USER - User with such id
            does not exist; ERR_INVALID_INPUT - Wrong structure of input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Change access level
      tags:
      - admin
  /admin/get-level-complaints:
    get:
      consumes:
      - application/json
      description: Get list of level complaints assigned to current admin. Available
        only for moderators and admins
      operationId: get-level-complaints
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LevelComplaints'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get Level Complaints for moderator to process
      tags:
      - admin
  /admin/get-user-complaints:
    get:
      consumes:
      - application/json
      description: Get list of user complaints assigned to current admin. Available
        only for moderators and admins
      operationId: get-user-complaints
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.UserComplaints'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get User Complaints for moderator to process
      tags:
      - admin
  /admin/get-users:
    get:
      consumes:
      - application/json
      description: Get list of users with given params. Available only for moderators
        and admins
      operationId: get-users
      parameters:
      - description: Search params - name, isBanned, pages info
        in: body
        name: user_search_params
        required: true
        schema:
          $ref: '#/definitions/domain.UserSearchParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Users'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get Users with given params
      tags:
      - admin
  /admin/process-level-complaint:
    post:
      consumes:
      - application/json
      description: Delete level complaint with given id. Available only for moderators
        and admins
      operationId: process-level-complaint
      parameters:
      - description: Complaint ID
        in: body
        name: complaint_id
        required: true
        schema:
          $ref: '#/definitions/domain.ComplaintID'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_ENTITY_NOT_FOUND - There is no complaint
            with such id among the ones assigned to you'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Delete level complaint with given id
      tags:
      - admin
  /admin/process-user-complaint:
    post:
      consumes:
      - application/json
      description: Delete user complaint with given id. Available only for moderators
        and admins
      operationId: process-user-complaint
      parameters:
      - description: Complaint ID
        in: body
        name: complaint_id
        required: true
        schema:
          $ref: '#/definitions/domain.ComplaintID'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_ENTITY_NOT_FOUND - There is no complaint
            with such id among the ones assigned to you'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Delete user complaint with given id
      tags:
      - admin
  /admin/unban-level:
    post:
      consumes:
      - application/json
      description: Unban level with given id. Available only for moderators and admins
      operationId: unban-level
      parameters:
      - description: id of level you want to unban
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.LevelBan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_ENTITY_NOT_FOUND - Level with such
            id does not exist; ERR_INVALID_INPUT - Wrong structure of input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Unban level
      tags:
      - admin
  /admin/unban-user:
    post:
      consumes:
      - application/json
      description: Unban user with given id if your access is greater than theirs.
        Available only for moderators and admins
      operationId: unban-user
      parameters:
      - description: id of user you want to unban
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.UserUnban'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_NO_SUCH_USER - User with such id
            does not exist; ERR_INVALID_INPUT - Wrong structure of input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Unban user
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: authorize using login and password
      operationId: login
      parameters:
      - description: login and password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RefreshStruct'
        "400":
          description: 'Possible messages: ERR_INVALID_INPUT - Wrong structure of
            input json; ERR_NO_SUCH_USER - User with such name and password does not
            exist;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server; '
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: get new access token and refresh token by existing access token
        and refresh token
      operationId: refresh
      parameters:
      - description: RefreshToken and AccessToken
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.RefreshStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RefreshStruct'
        "400":
          description: 'Possible messages: ERR_INVALID_INPUT - Wrong structure of
            input json; ERR_NO_SUCH_USER - User with id as in access token does not
            exist; ERR_ACCESS_TOKEN_WRONG - Wrong access token; ERR_REFRESH_TOKEN_WRONG
            - Wrong refresh token;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Refresh token expired;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server; '
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: create new account
      operationId: create-account
      parameters:
      - description: new account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RefreshStruct'
        "400":
          description: 'Possible messages: ERR_INVALID_INPUT - Wrong structure of
            input json; ERR_USER_EXISTS - User with such name already exists;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server; '
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Register
      tags:
      - auth
  /level/create-level:
    post:
      consumes:
      - multipart/form-data
      description: Create level with given structure
      operationId: create-level
      parameters:
      - description: Archive with level.
        in: formData
        name: level
        required: true
        type: file
      - description: JSON file with level description.
        in: formData
        name: info
        required: true
        type: file
      - description: File with preview image of the level
        in: formData
        name: preview
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetLevelInfoStruct'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Create level
      tags:
      - level
  /level/download-level:
    get:
      consumes:
      - application/json
      description: Download level with given id from server
      operationId: download-level
      parameters:
      - description: id of level you want to download
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.GetLevelInfoStruct'
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Archive with level.
          schema:
            type: file
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input json; ERR_ENTITY_NOT_FOUND - no such level on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Download level
      tags:
      - level
  /level/get-level-info:
    get:
      consumes:
      - application/json
      description: Get level info about level with given id
      operationId: get-level-info
      parameters:
      - description: id of level you want to find out about
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.GetLevelInfoStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LevelInfo'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get level info
      tags:
      - level
  /level/get-level-list:
    get:
      consumes:
      - application/json
      description: Get level list with given params
      operationId: get-level-list
      parameters:
      - description: search and filter params
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.FetchLevelStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LevelsList'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get level list
      tags:
      - level
  /level/update-level:
    post:
      consumes:
      - multipart/form-data
      description: Update level with given structure
      operationId: update-level
      parameters:
      - description: Archive with level.
        in: formData
        name: level
        required: true
        type: file
      - description: JSON file with level description.
        in: formData
        name: info
        required: true
        type: file
      - description: File with preview image of the level
        in: formData
        name: preview
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetLevelInfoStruct'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input json;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Update level
      tags:
      - level
  /single-game/send-results:
    post:
      consumes:
      - application/json
      description: Send results of single player game
      operationId: send-results
      parameters:
      - description: Results of the game
        in: body
        name: complaint_id
        required: true
        schema:
          $ref: '#/definitions/domain.LevelComplete'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_NO_SUCH_USER - There is no user with
            such id'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Send results of single player game
      tags:
      - single-game
  /stats/get-user-stats:
    get:
      consumes:
      - application/json
      description: Get User Statistics by id
      operationId: get-user-stats
      parameters:
      - description: Id of user
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.UserID'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetUserStatsRes'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_NO_SUCH_USER - There is no user with
            such id'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get User Statistics
      tags:
      - stats
  /stats/get-users-top:
    get:
      consumes:
      - application/json
      description: Get Users Top with given params
      operationId: get-users-top
      parameters:
      - description: Search params
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.StatSortFilterParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetUsersTop'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_NO_SUCH_USER - There is no user with
            such id'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get Users Top
      tags:
      - stats
  /user-actions/change-avatar:
    post:
      consumes:
      - multipart/form-data
      description: Change avatar. In case of empty request sets default avatar.
      operationId: change-avatar
      parameters:
      - description: File with new avatar image
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input files (e.g. wrong name, not "avatar");'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired;
            ERR_PERMISSION_DENIED - Not enough rights to perform the action'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Change Avatar
      tags:
      - user-actions
  /user-actions/get-user-info:
    get:
      consumes:
      - application/json
      description: Get username by id
      operationId: get-user-info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetUserInfoStruct'
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - There is no id
            in token payload/Wrong structure of Access Token/No Access Token; ERR_NO_SUCH_USER
            - User with such id not found;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get User Info
      tags:
      - user-actions
  /user-actions/logout:
    post:
      consumes:
      - application/json
      description: Expire refreshToken manually
      operationId: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - There is no id
            in token payload/Wrong structure of Access Token/No Access Token; ERR_NO_SUCH_USER
            - User with such id not found;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Logout
      tags:
      - user-actions
  /user-actions/write-level-complaint:
    post:
      consumes:
      - application/json
      description: 'Send level complaint to server. Possible Reason values: Offencive
        name, Offencive video, Offencive audio, Offencive text'
      operationId: write-level-complaint
      parameters:
      - description: new complaint info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.LevelComplaint'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input json/Invalid Reason;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Write Level Complaint
      tags:
      - user-actions
  /user-actions/write-user-complaint:
    post:
      consumes:
      - application/json
      description: 'Send user complaint to server. Possible Reason values: Cheating,
        Offencive nickname, Unsportsmanlike conduct'
      operationId: write-user-complaint
      parameters:
      - description: new complaint info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.UserComplaint'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible messages: ERR_ACCESS_TOKEN_WRONG - Wrong structure
            of Access Token/No Access Token; ERR_INVALID_INPUT - Wrong structure of
            input json/Invalid Reason;'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: 'Possible messages: ERR_UNAUTHORIZED - Access Token expired'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: 'Possible messages: ERR_INTERNAL - Error on server'
          schema:
            $ref: '#/definitions/handler.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Write User Complaint
      tags:
      - user-actions
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
