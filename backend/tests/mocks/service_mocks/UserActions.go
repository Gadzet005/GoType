// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/Gadzet005/GoType/backend/internal/domain/Complaints"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	sql "database/sql"

	time "time"
)

// UserActions is an autogenerated mock type for the UserActions type
type UserActions struct {
	mock.Mock
}

// CreateLevelComplaint provides a mock function with given fields: complaint
func (_m *UserActions) CreateLevelComplaint(complaint domain.LevelComplaint) error {
	ret := _m.Called(complaint)

	if len(ret) == 0 {
		panic("no return value specified for CreateLevelComplaint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.LevelComplaint) error); ok {
		r0 = rf(complaint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserComplaint provides a mock function with given fields: complaint
func (_m *UserActions) CreateUserComplaint(complaint domain.UserComplaint) error {
	ret := _m.Called(complaint)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserComplaint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserComplaint) error); ok {
		r0 = rf(complaint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropRefreshToken provides a mock function with given fields: id
func (_m *UserActions) DropRefreshToken(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DropRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserById provides a mock function with given fields: id
func (_m *UserActions) GetUserById(id int) (string, int, time.Time, string, sql.NullString, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 string
	var r1 int
	var r2 time.Time
	var r3 string
	var r4 sql.NullString
	var r5 error
	if rf, ok := ret.Get(0).(func(int) (string, int, time.Time, string, sql.NullString, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int) time.Time); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Get(2).(time.Time)
	}

	if rf, ok := ret.Get(3).(func(int) string); ok {
		r3 = rf(id)
	} else {
		r3 = ret.Get(3).(string)
	}

	if rf, ok := ret.Get(4).(func(int) sql.NullString); ok {
		r4 = rf(id)
	} else {
		r4 = ret.Get(4).(sql.NullString)
	}

	if rf, ok := ret.Get(5).(func(int) error); ok {
		r5 = rf(id)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// UpdateAvatar provides a mock function with given fields: userId, avatarFile
func (_m *UserActions) UpdateAvatar(userId int, avatarFile *multipart.FileHeader) error {
	ret := _m.Called(userId, avatarFile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *multipart.FileHeader) error); ok {
		r0 = rf(userId, avatarFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserActions creates a new instance of UserActions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserActions(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserActions {
	mock := &UserActions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
