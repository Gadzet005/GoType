// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/Gadzet005/GoType/backend/internal/domain/User"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Authorization is an autogenerated mock type for the Authorization type
type Authorization struct {
	mock.Mock
}

// CreateSeniorAdmin provides a mock function with given fields: username, password
func (_m *Authorization) CreateSeniorAdmin(username string, password string) error {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateSeniorAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *Authorization) CreateUser(user domain.User) (string, string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(domain.User) (string, string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.User) string); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(domain.User) error); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateToken provides a mock function with given fields: username, password
func (_m *Authorization) GenerateToken(username string, password string) (string, string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (string, string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateTokenByToken provides a mock function with given fields: accessToken, refreshToken
func (_m *Authorization) GenerateTokenByToken(accessToken string, refreshToken string) (string, string, error) {
	ret := _m.Called(accessToken, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenByToken")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (string, string, error)); ok {
		return rf(accessToken, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(accessToken, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(accessToken, refreshToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(accessToken, refreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Parse provides a mock function with given fields: accessToken
func (_m *Authorization) Parse(accessToken string) (time.Time, int, int, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 time.Time
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(string) (time.Time, int, int, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string) int); ok {
		r2 = rf(accessToken)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(accessToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewAuthorization creates a new instance of Authorization. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorization(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authorization {
	mock := &Authorization{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
