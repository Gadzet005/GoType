// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	level "github.com/Gadzet005/GoType/backend/internal/domain/Level"
	statistics "github.com/Gadzet005/GoType/backend/internal/domain/Statistics"

	mock "github.com/stretchr/testify/mock"
	"mime/multipart"
)

// Level is an autogenerated mock type for the Level interface
type Level struct {
	mock.Mock
}

func (_m *Level) CreateLevel(userId int, levelFile, infoFile, previewFile *multipart.FileHeader) (int, error) {
	ret := _m.Called(userId, levelFile, infoFile, previewFile)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *multipart.FileHeader, *multipart.FileHeader, *multipart.FileHeader) int); ok {
		r0 = rf(userId, levelFile, infoFile, previewFile)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, *multipart.FileHeader, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r1 = rf(userId, levelFile, infoFile, previewFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Level) UpdateLevel(userId int, levelFile, infoFile, previewFile *multipart.FileHeader) (int, error) {
	ret := _m.Called(userId, levelFile, infoFile, previewFile)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *multipart.FileHeader, *multipart.FileHeader, *multipart.FileHeader) int); ok {
		r0 = rf(userId, levelFile, infoFile, previewFile)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, *multipart.FileHeader, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r1 = rf(userId, levelFile, infoFile, previewFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Level) DeleteLevel(levelId int) error {
	ret := _m.Called(levelId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Level) GetLevelById(levelId int) (level.Level, error) {
	ret := _m.Called(levelId)

	var r0 level.Level
	var r1 error
	if rf, ok := ret.Get(0).(func(int) level.Level); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Get(0).(level.Level)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(levelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Level) GetLevelList(fetchStruct level.FetchLevelStruct) ([]level.Level, error) {
	ret := _m.Called(fetchStruct)

	var r0 []level.Level
	var r1 error
	if rf, ok := ret.Get(0).(func(level.FetchLevelStruct) []level.Level); ok {
		r0 = rf(fetchStruct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]level.Level)
		}
	}

	if rf, ok := ret.Get(1).(func(level.FetchLevelStruct) error); ok {
		r1 = rf(fetchStruct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Level) CheckLevelExists(levId int) (string, error) {
	ret := _m.Called(levId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(levId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(levId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Level) GetLevelStats(levelId int) (statistics.LevelStats, error) {
	ret := _m.Called(levelId)

	var r0 statistics.LevelStats
	var r1 error
	if rf, ok := ret.Get(0).(func(int) statistics.LevelStats); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Get(0).(statistics.LevelStats)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(levelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Level) GetLevelUserTop(levelId int) ([]statistics.UserLevelCompletionInfo, error) {
	ret := _m.Called(levelId)

	var r0 []statistics.UserLevelCompletionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) []statistics.UserLevelCompletionInfo); ok {
		r0 = rf(levelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]statistics.UserLevelCompletionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(levelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func NewMockLevel(t interface {
	mock.TestingT
	Cleanup(func())
}) *Level {
	mock := &Level{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
