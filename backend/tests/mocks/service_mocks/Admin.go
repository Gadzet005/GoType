// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	Bans "github.com/Gadzet005/GoType/backend/internal/domain/Bans"
	User "github.com/Gadzet005/GoType/backend/internal/domain/User"

	UserAccess "github.com/Gadzet005/GoType/backend/internal/domain/UserAccess"

	domain "github.com/Gadzet005/GoType/backend/internal/domain/Complaints"

	mock "github.com/stretchr/testify/mock"
)

// Admin is an autogenerated mock type for the Admin type
type Admin struct {
	mock.Mock
}

// GetLevelComplaints provides a mock function with given fields: adminId, adminAccess
func (_m *Admin) GetLevelComplaints(adminId int, adminAccess int) ([]domain.LevelComplaint, error) {
	ret := _m.Called(adminId, adminAccess)

	if len(ret) == 0 {
		panic("no return value specified for GetLevelComplaints")
	}

	var r0 []domain.LevelComplaint
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.LevelComplaint, error)); ok {
		return rf(adminId, adminAccess)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.LevelComplaint); ok {
		r0 = rf(adminId, adminAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LevelComplaint)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(adminId, adminAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserComplaints provides a mock function with given fields: adminId, adminAccess
func (_m *Admin) GetUserComplaints(adminId int, adminAccess int) ([]domain.UserComplaint, error) {
	ret := _m.Called(adminId, adminAccess)

	if len(ret) == 0 {
		panic("no return value specified for GetUserComplaints")
	}

	var r0 []domain.UserComplaint
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.UserComplaint, error)); ok {
		return rf(adminId, adminAccess)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.UserComplaint); ok {
		r0 = rf(adminId, adminAccess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserComplaint)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(adminId, adminAccess)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: adminAccess, searchParams
func (_m *Admin) GetUsers(adminAccess int, searchParams User.UserSearchParams) ([]User.UserInfo, error) {
	ret := _m.Called(adminAccess, searchParams)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []User.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int, User.UserSearchParams) ([]User.UserInfo, error)); ok {
		return rf(adminAccess, searchParams)
	}
	if rf, ok := ret.Get(0).(func(int, User.UserSearchParams) []User.UserInfo); ok {
		r0 = rf(adminAccess, searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int, User.UserSearchParams) error); ok {
		r1 = rf(adminAccess, searchParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessLevelComplaint provides a mock function with given fields: adminId, adminAccess, complaintId
func (_m *Admin) ProcessLevelComplaint(adminId int, adminAccess int, complaintId int) error {
	ret := _m.Called(adminId, adminAccess, complaintId)

	if len(ret) == 0 {
		panic("no return value specified for ProcessLevelComplaint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(adminId, adminAccess, complaintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessUserComplaint provides a mock function with given fields: adminId, adminAccess, complaintId
func (_m *Admin) ProcessUserComplaint(adminId int, adminAccess int, complaintId int) error {
	ret := _m.Called(adminId, adminAccess, complaintId)

	if len(ret) == 0 {
		panic("no return value specified for ProcessUserComplaint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(adminId, adminAccess, complaintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryBanLevel provides a mock function with given fields: adminAccess, ban
func (_m *Admin) TryBanLevel(adminAccess int, ban Bans.LevelBan) error {
	ret := _m.Called(adminAccess, ban)

	if len(ret) == 0 {
		panic("no return value specified for TryBanLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, Bans.LevelBan) error); ok {
		r0 = rf(adminAccess, ban)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryBanUser provides a mock function with given fields: adminAccess, ban
func (_m *Admin) TryBanUser(adminAccess int, ban Bans.UserBan) error {
	ret := _m.Called(adminAccess, ban)

	if len(ret) == 0 {
		panic("no return value specified for TryBanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, Bans.UserBan) error); ok {
		r0 = rf(adminAccess, ban)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryChangeAccessLevel provides a mock function with given fields: adminAccess, ban
func (_m *Admin) TryChangeAccessLevel(adminAccess int, ban UserAccess.ChangeUserAccess) error {
	ret := _m.Called(adminAccess, ban)

	if len(ret) == 0 {
		panic("no return value specified for TryChangeAccessLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, UserAccess.ChangeUserAccess) error); ok {
		r0 = rf(adminAccess, ban)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryUnbanLevel provides a mock function with given fields: adminAccess, ban
func (_m *Admin) TryUnbanLevel(adminAccess int, ban Bans.LevelBan) error {
	ret := _m.Called(adminAccess, ban)

	if len(ret) == 0 {
		panic("no return value specified for TryUnbanLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, Bans.LevelBan) error); ok {
		r0 = rf(adminAccess, ban)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryUnbanUser provides a mock function with given fields: adminAccess, ban
func (_m *Admin) TryUnbanUser(adminAccess int, ban Bans.UserUnban) error {
	ret := _m.Called(adminAccess, ban)

	if len(ret) == 0 {
		panic("no return value specified for TryUnbanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, Bans.UserUnban) error); ok {
		r0 = rf(adminAccess, ban)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdmin creates a new instance of Admin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Admin {
	mock := &Admin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
