// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/Gadzet005/GoType/backend/internal/domain/Level"
	Statistics "github.com/Gadzet005/GoType/backend/internal/domain/Statistics"

	mock "github.com/stretchr/testify/mock"
)

// Level is an autogenerated mock type for the Level type
type Level struct {
	mock.Mock
}

// CreateLevel provides a mock function with given fields: level
func (_m *Level) CreateLevel(level domain.Level) (string, string, int, error) {
	ret := _m.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for CreateLevel")
	}

	var r0 string
	var r1 string
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(domain.Level) (string, string, int, error)); ok {
		return rf(level)
	}
	if rf, ok := ret.Get(0).(func(domain.Level) string); ok {
		r0 = rf(level)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.Level) string); ok {
		r1 = rf(level)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(domain.Level) int); ok {
		r2 = rf(level)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(domain.Level) error); ok {
		r3 = rf(level)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// DeleteLevel provides a mock function with given fields: levelId
func (_m *Level) DeleteLevel(levelId int) error {
	ret := _m.Called(levelId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchLevels provides a mock function with given fields: _a0
func (_m *Level) FetchLevels(_a0 map[string]interface{}) ([]domain.Level, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FetchLevels")
	}

	var r0 []domain.Level
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]domain.Level, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []domain.Level); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Level)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLevelById provides a mock function with given fields: levelId
func (_m *Level) GetLevelById(levelId int) (domain.Level, error) {
	ret := _m.Called(levelId)

	if len(ret) == 0 {
		panic("no return value specified for GetLevelById")
	}

	var r0 domain.Level
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Level, error)); ok {
		return rf(levelId)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Level); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Get(0).(domain.Level)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(levelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLevelStats provides a mock function with given fields: levelId
func (_m *Level) GetLevelStats(levelId int) (Statistics.LevelStats, error) {
	ret := _m.Called(levelId)

	if len(ret) == 0 {
		panic("no return value specified for GetLevelStats")
	}

	var r0 Statistics.LevelStats
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (Statistics.LevelStats, error)); ok {
		return rf(levelId)
	}
	if rf, ok := ret.Get(0).(func(int) Statistics.LevelStats); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Get(0).(Statistics.LevelStats)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(levelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLevelUserTop provides a mock function with given fields: levelId
func (_m *Level) GetLevelUserTop(levelId int) ([]Statistics.UserLevelCompletionInfo, error) {
	ret := _m.Called(levelId)

	if len(ret) == 0 {
		panic("no return value specified for GetLevelUserTop")
	}

	var r0 []Statistics.UserLevelCompletionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]Statistics.UserLevelCompletionInfo, error)); ok {
		return rf(levelId)
	}
	if rf, ok := ret.Get(0).(func(int) []Statistics.UserLevelCompletionInfo); ok {
		r0 = rf(levelId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Statistics.UserLevelCompletionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(levelId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPathsById provides a mock function with given fields: levelId
func (_m *Level) GetPathsById(levelId int) (int, string, string, error) {
	ret := _m.Called(levelId)

	if len(ret) == 0 {
		panic("no return value specified for GetPathsById")
	}

	var r0 int
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(int) (int, string, string, error)); ok {
		return rf(levelId)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(levelId)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(int) string); ok {
		r2 = rf(levelId)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(int) error); ok {
		r3 = rf(levelId)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateLevel provides a mock function with given fields: levelInfo
func (_m *Level) UpdateLevel(levelInfo domain.LevelUpdateStruct) (string, string, int, error) {
	ret := _m.Called(levelInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLevel")
	}

	var r0 string
	var r1 string
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(domain.LevelUpdateStruct) (string, string, int, error)); ok {
		return rf(levelInfo)
	}
	if rf, ok := ret.Get(0).(func(domain.LevelUpdateStruct) string); ok {
		r0 = rf(levelInfo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.LevelUpdateStruct) string); ok {
		r1 = rf(levelInfo)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(domain.LevelUpdateStruct) int); ok {
		r2 = rf(levelInfo)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(domain.LevelUpdateStruct) error); ok {
		r3 = rf(levelInfo)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewLevel creates a new instance of Level. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLevel(t interface {
	mock.TestingT
	Cleanup(func())
}) *Level {
	mock := &Level{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
