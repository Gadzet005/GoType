// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/Gadzet005/GoType/backend/internal/domain/Complaints"
	User "github.com/Gadzet005/GoType/backend/internal/domain/User"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Admin is an autogenerated mock type for the Admin type
type Admin struct {
	mock.Mock
}

// BanLevel provides a mock function with given fields: levelId
func (_m *Admin) BanLevel(levelId int) error {
	ret := _m.Called(levelId)

	if len(ret) == 0 {
		panic("no return value specified for BanLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BanUser provides a mock function with given fields: userId, expirationTime, reason
func (_m *Admin) BanUser(userId int, expirationTime time.Time, reason string) error {
	ret := _m.Called(userId, expirationTime, reason)

	if len(ret) == 0 {
		panic("no return value specified for BanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, time.Time, string) error); ok {
		r0 = rf(userId, expirationTime, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeUserAccess provides a mock function with given fields: userId, newAccess
func (_m *Admin) ChangeUserAccess(userId int, newAccess int) error {
	ret := _m.Called(userId, newAccess)

	if len(ret) == 0 {
		panic("no return value specified for ChangeUserAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, newAccess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLevelComplaint provides a mock function with given fields: moderatorId, complaintId
func (_m *Admin) DeleteLevelComplaint(moderatorId int, complaintId int) error {
	ret := _m.Called(moderatorId, complaintId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLevelComplaint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(moderatorId, complaintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserComplaint provides a mock function with given fields: moderatorId, complaintId
func (_m *Admin) DeleteUserComplaint(moderatorId int, complaintId int) error {
	ret := _m.Called(moderatorId, complaintId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserComplaint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(moderatorId, complaintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLevelComplaints provides a mock function with given fields: moderatorId
func (_m *Admin) GetLevelComplaints(moderatorId int) ([]domain.LevelComplaint, error) {
	ret := _m.Called(moderatorId)

	if len(ret) == 0 {
		panic("no return value specified for GetLevelComplaints")
	}

	var r0 []domain.LevelComplaint
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.LevelComplaint, error)); ok {
		return rf(moderatorId)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.LevelComplaint); ok {
		r0 = rf(moderatorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LevelComplaint)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(moderatorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAccess provides a mock function with given fields: id
func (_m *Admin) GetUserAccess(id int) (int, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccess")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserComplaints provides a mock function with given fields: moderatorId
func (_m *Admin) GetUserComplaints(moderatorId int) ([]domain.UserComplaint, error) {
	ret := _m.Called(moderatorId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserComplaints")
	}

	var r0 []domain.UserComplaint
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.UserComplaint, error)); ok {
		return rf(moderatorId)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.UserComplaint); ok {
		r0 = rf(moderatorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserComplaint)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(moderatorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: params
func (_m *Admin) GetUsers(params User.UserSearchParams) ([]User.UserInfo, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []User.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(User.UserSearchParams) ([]User.UserInfo, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(User.UserSearchParams) []User.UserInfo); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(User.UserSearchParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnbanLevel provides a mock function with given fields: levelId
func (_m *Admin) UnbanLevel(levelId int) error {
	ret := _m.Called(levelId)

	if len(ret) == 0 {
		panic("no return value specified for UnbanLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(levelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnbanUser provides a mock function with given fields: userId
func (_m *Admin) UnbanUser(userId int) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for UnbanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdmin creates a new instance of Admin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Admin {
	mock := &Admin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
